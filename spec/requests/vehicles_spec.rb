require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/vehicles", type: :request do

  # This should return the minimal set of attributes required to create a valid
  # Vehicle. As you add validations to Vehicle, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
      driver_id: driver.id,
      model: "lancer",
      kind: :car,
      color: "red",
      license_plate: "owp8193",
      capacity: 5
    }
  }

  let(:invalid_attributes) {
    {}
  }

  let!(:vehicle) { FactoryBot.create(:vehicle, driver: driver) }
  let(:driver) { FactoryBot.create(:driver, user: user) }
  let(:user) { FactoryBot.create(:user) }

  describe "GET /show" do
    it "renders a successful response" do
      post show_by_driver_vehicles_url, params: { vehicle: { driver_id: driver.id } }

      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Vehicle" do
        expect {
          post vehicles_url, params: { vehicle: valid_attributes }
        }.to change(Vehicle, :count).by(1)
      end

      it "redirects to the created vehicle" do
        post vehicles_url, params: { vehicle: valid_attributes }
        expect(response).to have_http_status :created
      end
    end

    context "with invalid parameters" do
      it "does not create a new Vehicle" do
        expect {
          post vehicles_url, params: { vehicle: invalid_attributes }
        }.to change(Vehicle, :count).by(0)
      end


      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post vehicles_url, params: { vehicle: invalid_attributes }
        expect(response).to have_http_status(:bad_request)
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        {
          capacity: 0
        }
      }

      it "updates the requested vehicle" do
        patch vehicle_url(vehicle), params: { vehicle: new_attributes }
        vehicle.reload

        expect(vehicle).to have_attributes(new_attributes)
      end

      it "redirects to the vehicle" do
        patch vehicle_url(vehicle), params: { vehicle: new_attributes }
        vehicle.reload

        expect(JSON.parse response.body).to include(JSON.parse(vehicle.to_json))
      end
    end

    context "with invalid parameters" do
      it "renders a response with bad request" do
        patch vehicle_url(vehicle), params: { vehicle: invalid_attributes }

        expect(response).to have_http_status(:bad_request)
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested vehicle" do
      expect {
        delete vehicle_url(vehicle)
      }.to change(Vehicle, :count).by(-1)
    end

    it "redirects to the vehicles list" do
      delete vehicle_url(vehicle)

      expect(response).to have_http_status :ok
    end
  end
end
