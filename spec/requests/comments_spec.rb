require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/comments", type: :request do

  # This should return the minimal set of attributes required to create a valid
  # Comment. As you add validations to Comment, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
      user_id: user.id,
      lift_id: lift.id,
      body: "coment√°rio inofensivo"
    }
  }

  let(:invalid_attributes) {
    {}
  }
  let!(:comment) { FactoryBot.create(:comment, user: user, lift: lift) }
  let(:user) { FactoryBot.create(:user) }
  # let(:passenger) { FactoryBot.create(:passenger) }
  # let!(:lift_passenger) { FactoryBot.create(:lift_passenger, passenger: passenger, lift: lift) }
  let(:lift) { FactoryBot.create(:lift) }

  describe "GET /index" do
    it "renders a successful response" do
      get comments_url

      expect(response).to be_successful
    end
  end

  # describe "GET /show" do
  #   it "renders a successful response" do
  #     get comment_url(comment)
  #
  #     expect(response).to be_successful
  #   end
  # end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Comment" do
        expect {
          post comments_url, params: { comment: valid_attributes }
        }.to change(Comment, :count).by(1)
      end

      it "redirects to the created comment" do
        post comments_url, params: { comment: valid_attributes }

        expect(response).to have_http_status :created
      end
    end

    context "with invalid parameters" do
      it "does not create a new Comment" do
        expect {
          post comments_url, params: { comment: invalid_attributes }
        }.to change(Comment, :count).by(0)
      end


      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post comments_url, params: { comment: invalid_attributes }

        expect(response).to have_http_status(:bad_request)
      end

    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        {
          body: "novo corpo do comentario"
        }
      }

      it "updates the requested comment" do
        patch comment_url(comment), params: { comment: new_attributes }
        comment.reload

        expect(comment).to have_attributes(new_attributes)
      end

      it "redirects to the comment" do
        patch comment_url(comment), params: { comment: new_attributes }
        comment.reload

        expect(response).to have_http_status :ok
      end
    end

    context "with invalid parameters" do

      it "renders a response with bad request" do
        patch comment_url(comment), params: { comment: invalid_attributes }

        expect(response).to have_http_status(:bad_request)
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested comment" do
      expect {
        delete comment_url(comment)
      }.to change(Comment, :count).by(-1)
    end

    it "redirects to the comments list" do
      delete comment_url(comment)

      expect(response).to have_http_status :ok
    end
  end
end
