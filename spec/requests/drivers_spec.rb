require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/drivers", type: :request do

  # This should return the minimal set of attributes required to create a valid
  # Driver. As you add validations to Driver, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
      user_id: user.id,
      cnh: "12345678910"
    }
  }

  let(:invalid_attributes) {
    {}
  }

  let!(:driver) { FactoryBot.create(:driver, user: user) }
  let(:user) { FactoryBot.create(:user) }

  describe "GET /index" do
    it "renders a successful response" do
      get drivers_url

      expect(response).to be_successful
    end
  end

  describe "GET /actual_lift" do
    let!(:lift) { FactoryBot.create(:lift, status: :active, driver: driver) }

    it "renders a successful response" do
      get driver_actual_lift_url(driver), as: :json

      expect(response).to be_successful
      expect(JSON.parse response.body).to eq(JSON.parse lift.to_json)
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      get driver_url(driver)

      expect(response).to be_successful
    end
  end

  # describe "POST /create" do
  #   context "with valid parameters" do
  #     it "creates a new Driver" do
  #       expect {
  #         post drivers_url, params: { driver: valid_attributes }
  #       }.to change(Driver, :count).by(1)
  #     end
  #
  #     it "redirects to the created driver" do
  #       post drivers_url, params: { driver: valid_attributes }
  #
  #       expect(response).to have_http_status(201)
  #     end
  #   end
  #
  #   context "with invalid parameters" do
  #     it "does not create a new Driver" do
  #       expect {
  #         post drivers_url, params: { driver: invalid_attributes }
  #       }.to change(Driver, :count).by(0)
  #     end
  #
  #
  #     it "renders a response with 422 status (i.e. to display the 'new' template)" do
  #       post drivers_url, params: { driver: invalid_attributes }
  #
  #       expect(response).to have_http_status(:bad_request)
  #     end
  #   end
  # end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        {
          cnh: "01987654321"
        }
      }

      it "updates the requested driver" do
        patch driver_url(driver), params: { driver: new_attributes }
        driver.reload

        expect(driver).to have_attributes(new_attributes)
      end

      it "redirects to the driver" do
        patch driver_url(driver), params: { driver: new_attributes }
        driver.reload

        expect(response).to have_http_status :ok
      end
    end

    context "with invalid parameters" do

      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        patch driver_url(driver), params: { driver: invalid_attributes }

        expect(response).to have_http_status(:bad_request)
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested driver" do
      expect {
        delete driver_url(driver)
      }.to change(Driver, :count).by(-1)
    end

    it "redirects to the drivers list" do
      delete driver_url(driver)

      expect(response).to have_http_status(:ok)
    end
  end
end
